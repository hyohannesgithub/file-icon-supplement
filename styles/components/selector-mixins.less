@import 'font-mixins';

.load-type-variables(@type) when (@type = extension) {
  @regex: ~'$';
  @attr: ~'data-name@{regex}';
  @period: ~'.';
  @text-font-size: inherit;
  @margin: 0 5px 0 0;
}

.load-type-variables(@type) when (@type = file) {
  @regex: ~'';
  @attr: ~'data-name@{regex}';
  @period: ~'';
  @text-font-size: inherit;
  @margin: 0 5px 0 0;
}

.load-type-variables(@type) when (@type = grammarStatus) {
  @attr: ~'data-grammar';
  @period: ~'';
  @text-font-size: 0;
  @margin: 0;
}

.load-type-variables(@type) when (@type = grammarSelector) {
  @attr: ~'data-grammar';
  @period: ~'';
  @text-font-size: inherit;
  @margin: 0 0 0 20px;
}

.grammar-icon-after(@type; @font-family; @font-size) when (@type = grammarSelector) {
  float: right;
  padding-right: 10px;
  .icon-font(@icon; @font-family; @font-size);
}

.icon-before(@type; @font-family; @font-size) when not (@type = grammarSelector) {
  margin: @margin;
  width: 16px;
  .icon-font(@icon; @font-family; @font-size);
}

.icon-generator(@type; @extensions; @icon; @font-family: @fis; @font-size: 16px){
  .load-type-variables(@type);
  .loop(length(@extensions));
  .loop(@n) when (@n > 0) {
    @ext: extract(@extensions, @n);
    &[@{attr}="@{period}@{ext}"] {
      font-size: @text-font-size;
      &:before {
        .icon-before(@type; @font-family; @font-size);
      }
      &:after {
        .grammar-icon-after(@type; @font-family; @font-size);
      }
    }
    .loop((@n - 1));
  }
}
